JAVA SCRIPT
===============================================================

1. WHAT IS JAVA SCRIPT
In 1995, Javascript was developed by Brendan Eich
light-weight object oriented programming language
    used to build the web application, supporting to both front-end and back-end technologies


2. FEATURE OF JAVA SCRIPT
All popular web browsers support Javascript as they builtin execution programming
Structural programming language - like C, C++
light-weight languages, object oriented
Is a Casesensitive language


3. JAVASCRIPT STATEMENTS
Java Script statements compose of value, operators, expressions, keywords, and comments 


4. COMMENTS
To explain the JavaScript code - make it more readable
Prevent execution, when testing alternative code
    // , /* */


5. VARIABLES
Four type of variables
    Automatically - direct initailize the value - a = 10
    let - declare in a block of statements, can not be redeclared
    var - can declare as global variables
    const - can not change the value once it declared, can not be redeclared, can not be reassigned


6. OPERATORS
Arithmetic - perform arithmetic on numbers
    +, -, *, **, /, %, 
Assignment - assign value to variables
    =, +=, -=, *=, **=, /=, %=
Comparison - compare value to variables
    ==, ===, !=, !==, <, >, <=, >=, ?
Logical - used to test for true or fasle
    &&, ||, !


7. DATA TYPES
To be able to operate on variables,
String, Number, Boolean, Undefined, null, Bigint - scientific notations ex: 123e-5


8. FUNCTIONS
Block of code to perform a particular task
    function myFunction(a,b) { }


9. STRING METHODS
text = "JavaScript language"
length - return the length of string - text.length
charAt() - return the character of specified index in a string - text.charAt(2): v
charCodeAt() - return the character unicode of specified index in a string - text.charCodeAt(2): 118
at() - return the element of specified index in a string - text.at(2): v
slice() - extract a part of string(from start index & end index) from a string - text.slice(2:4): va
substring() - extract a part of string(from start index & end index) from a string - text.substring(2:4): va
substr() - extract a part of string(from start index & length index) from a string - text.substr(2:2): va
toUpperCase() - convert a string to uppercase - text.toUpperCase()
toLowerCase() - convert a string to lowercase - text.toLowerCase()
concat() - join the two string - text.concat("", text2)
trim() - remove whitespace from both side of string - text.trim()
trimStart() - remove whitespace from start side of string - text.trimStart()
trimEnd() - remove whitespace from end side of string - text.trimEnd()
repeat() - return a string with a number copies of a string - text.repeat(2)
replace() - replace a string with another value of string - text.replace("Java", "Python")
replaceAll() - replace a string with another value of string - text.replaceAll("Java", "Python")
split() - split a string with space - text.split(" ")


9. STRING SEARCH
indexOf() - return the index of the first occurence of a string in string - text.indexOf('Script'): 4
lastIndexOf() - return the index of the last occurence of a string in string - text.lastIndexOf('Script'): 9
search() - return the position of the first occurence of a string in string -  text.search('Script'): 4 
    - difference on indexOf can not powerful search values(re)
match() - return the contains of matching string in a string - text.match('Script'): Script
    - return an array, global match - 'Script'/g, global match with case insensitive - 'Script'/gi
matchAll() - return the iterator contains of matching string in a string - text.match('Script'): Script,Script


10. INTEGER METHODS
num = 23
toString() - convert a number into string - num.toString(): '23'
toExponential() - return a string, rounded number and exponential notations - num.toExponential(): '23'
    - num.toExponential(2): 23.00+0
    - num.toExponential(4): 23.0000+0
toFixed() - return a string, with number of specified number of decimals - num.toFixed(): 23
    - num.toFixed(2): 23.00
    - num.toFixed(4): 23.0000
toPrecision - return a string, with number of specified length - num.toPrecision(): 23
    - num.toPrecision(2): 23
    - num.toPrecision(4): 23.00
valueOf - return a number of number - num.valueOf() : 23
Number - convert javascript variables as number - Number("10"): 10
    - Number(false): 0
    - Number(true): 1
    - Number("10.33"): 10.33
    - Number("10 33"): Nan
    - Number("10,33"): Nan
    - Number("string 33"): Nan
    - Number("2017-09-30"): 1506729600000
parseInt - convert string into int - parseInt("10"): 10
    - Number("-10"): -10
    - Number("-10.33"): 10
    - Number("10 33"): 10
    - Number("10 string"): 10
    - Number("string 33"): Nan
parseFloat - convert string into float - parseFloat("10"): 10
    - Number("10"): 10
    - Number("10.33"): 10.33
    - Number("10 33"): 10
    - Number("10 string"): 10
    - Number("string 33"): Nan


11. ARRAY:
Special variable In JavaScript, used to store the multiple values in a single variable

 
12. ARRAY METHODS:
const data = ['banana', 'apple', 'orange', 'mango']
length - return the array of length - data.length : 4
toString() - convert a array into string - data.toString() : banana,apple,orange,mango
at() - get the element of specified index from string - data.at(2) : orange
join() - join all array into string - data.join(*) : banana*apple*orange*mango
pop() - remove the last element from an array - data.pop(): ['banana', 'apple', 'orange']
push() - add the element an array at the last - data.push('grape') : ['banana', 'apple', 'orange', 'mango', 'grape']
Shift() - remove the first element from an array - data.shift(): ['apple', 'orange', 'mango']
unshift() - add the element an array at the first - data.unshift('grape') : ['grape', 'banana', 'apple', 'orange', 'mango']
delete() - remove the element of specified index in a array - delete data[2] : ['banana', 'apple', 'orange', 'grape']
concat() -  join the two array - data.concat(data2):
data.concat(data2, data3):
copyWithin - copy an element from array, and moved to another position - data.copyWithin(2,0) : ['banana', 'apple', 'banana', 'mango']
flat() - create a new array from two dimensional array -
    - [[1,2], [3,4], [5,6]] : [1,2,3,4,5,6]
slice() - slice out a peice of array into a new array  -
    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
    const citrus = fruits.slice(1); // ["Orange", "Lemon", "Apple", "Mango"]
    const citrus = fruits.slice(1, 3); // ["Orange", "Lemon"]
splice() - add new items into a array
    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    fruits.splice(2, 0, "Lemon", "Kiwi"); // ["Banana", "Orange", "Lemon", "Kiwi", "Apple", "Mango"]
    fruits.splice(2, 2, "Lemon", "Kiwi"); // ["Banana", "Orange", "Lemon", "Kiwi"]
        - first parameter adding count of items(position - where need to be added)
        - second parameter removing count of items

indexOf - find the element in array and return the position
    const fruits = ["Apple", "Orange", "Apple", "Mango"];
    let position = fruits.indexOf("Apple") // 2
        - if element not present return -1
lastIndexOf() - find the element in array and return last occurence of position
    const fruits = ["Apple", "Orange", "Apple", "Mango"];
    let position = fruits.lastIndexOf("Apple") // 2
includes() - check the element is present or not in the array and return true or false
    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    fruits.includes("Mango"); // true
find() - find the element which is satified value in array  and return the element
    let arr = [5, 12, 8, 130, 44];
    let result = arr.find(element => element > 10); // 12
findIndex() - find the element which is satified value in array  and return the element position
    let arr = [5, 12, 8, 130, 44];
    let result = arr.findIndex(element => element > 10); // 1
again findLast(), findLastIndex()
findLast() - sort the array as alphabetically
    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    fruits.sort(); //[ 'Apple', 'Banana', 'Mango', 'Orange' ]
reverse() - reverse the element in a arrary
    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    fruits.reverse(); // [ 'Mango', 'Apple', 'Orange', 'Banana' ]
toSorted() - method as a safe way to sort an array without altering the original array
    const months = ["Jan", "Feb", "Mar", "Apr"];
    const sorted = months.toSorted(); // [ 'Apr', 'Feb', 'Jan', 'Mar' ]
toReversed() - method as a safe way to reverse an array without altering the original array
    const months = ["Jan", "Feb", "Mar", "Apr"];
    const reversed = months.toReversed(); // [ 'Apr', 'Mar', 'Feb', 'Jan' ]
forEach() - Executes a provided function once for each array element.
    const arr = [1, 2, 3, 4, 5];
    arr.forEach(element => {
    console.log(element * 2); // Output: 2, 4, 6, 8, 10
    });
        - first parameter - value, second parameter - index, third parameter - array
map() - creates a new array by performing a function on each array element, method does not change the original array.
    const arr = [1, 2, 3, 4, 5];
    arr.forEach(element => {
    console.log(element * 2); // Output: 2, 4, 6, 8, 10
    });
filter() - method creates a new array with array elements that pass a test.
    const arr = [1, 2, 3, 4, 5];
    const evenNumbers = arr.filter(element => element % 2 === 0);
    console.log(evenNumbers); // [2,4]
reduce() - method runs a function on each array element to produce (reduce it to) a single value.
    const arr = [1, 2, 3, 4, 5];
    const sum = arr.reduce((acc, element) => acc + element, 0);
    console.log(sum);



NODE JS:
Open source server environment, allows to run JavaScript on the server.
Server-side script to develop the scalable web application.


FEATURE:
Asynchronounus & Data driven
Single thread application
Nodejs scripting code runs Google Chrome v8 Engine
 

CONNECT THE SERVER:
Install the http npm package and connect the localhost server
var http = require('http');
 
http.createServer(function (req, res) {
 res.writeHead(200, {'Content-Type': 'text/html'});
 res.end('Hello World!');
}).listen(8080);
 
 
EXPRESS JS
Is a web application framework, that provides to create api to build the websites
Providing a structural approach to managing server-side logic.

// Import express
const express = require('express');

const app = express();

app.get('/', (req, res) => {
  res.send('Hello, Express!');
});

app.get('/about', (req, res) => {
  res.send('About Page');
});

// Start the server and listen on port 3000
app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});
 
 
WHY EXPRESS JS
Simplicity: less code and simple code
Flexibility: can build more modules
Scalability: can build wild range project
Community supports: large & active community
 
 
CORS: - Cross Origin Resource Sharing
Allows or restricts which domain can access your api.
Helps to secure the application to access which resource can be it.
  const corsOptions = {
    origin: 'https://frontend.com', 
    methods: ['GET', 'POST'], 
  };

  app.use(cors(corsOptions));

 
ROUTES:
Allow to user to navigate to specific url
 
 
MIDDLEWARE:
User-defined function that has each requests passes through before reaching the routes, and intercept of request, run the code and decide what to do next.
  application
      app.use((req, res, next) => {
        console.log('Request received');
        next();
      });
  Router level
      const router = express.Router();

      router.use((req, res, next) => {
        console.log('Router-level middleware');
        next();
      });

      router.get('/example', (req, res) => {
        res.send('This is an example route');
      });

      app.use('/api', router);

  Custom middleware

  Built-in middleware
      app.use(express.json());
 
EsLint:
Automatically detecting incorrect patterns found in javascript code
 
 
Test pyramid:
Three types: Unit testing, Integration Testing, End-to-end test
 
 
Scaffolding:
To generating basic structure of project


ADVANTAGES:
Asynchronounus, Data driven
Scalability - Asynchronounus allow to build large concurrent connections efficiently,
Fast execution - Nodejs runs on Chrome v8 Engine

DISADVANTAGES:
Callback hell -
Signle thread process - can not handle the heavy operations
Debug is difficult -


MICROSERVICE:
Collection small independent service connecting with other service

MACROSERVICE:
Entire application built as a single, unified unit
Titly connected with interagrated and component


BUFFER:
Perform an action in raw binary data, memory location in memory


STREAMS:
Type of data handling method, read & write inputs into output sequentially.
  Readable stream
  Writable stream
  Duplex stream - read and write
  Transform stream - compression files, encryption


CRYPTO:
Encrypt and decrypt data, for the the data secure, creating hash value


CALLBACK HELL:
Nested Callback process, resolve by promise method


HEADERS:
Authorization: bearer API KEY
'Content-Type': 'application/json' , multipart/form-data' , 'application/x-www-form-urlencoded'
'Accept' : 'application/json' , 'application/xml'
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
'Cookie': 'sessionid=your-session-id'
'Cache-Control': 'no-cache'
'Origin': 'https://your-website.com'


What is the Event Loop?
The event loop is a core concept in Node.js that helps the server handle multiple tasks simultaneously, 
even though it's running on a single thread. It does this by managing and executing asynchronous operations 
(like reading files, database calls, etc.) efficiently.
Nodejs operates single thread event loop, which allows to handle the muliple operations asynchronously.
  Single thread, Non-blocking I/O, Data driven


JWT Token:
types
  Access Token - Authorize service - short live(few mintues to hours)
  Refresh token - Obtain new token when expired - long live(day to week)
  ID Token - Authenticate to identify the user - short live(few mintues to hours)
  Custom token - Custom application specific purpose - various

  Unix Timestamp - 792397929


PUT vs PATCH:
PUT -  Update entire column data in a row, if id does not exist inserting a new row,
        - CREATE OR REPLACE method
PATCH - Update only one column in a row


EventEmitter:
events module that allows objects to emit events and handle events asynchronously. 
It's a fundamental part of the Node.js architecture

Closure:
Define a function inside of with another functiion
allow to access the outer function variable to the inside of functions


Stateless vs Stateful:
Stateless:
each request from a client to a server is independent, meaning the server does not retain any knowledge of previous requests.
Every request must contain all the necessary information for the server to understand and process it. REST APIs are typically stateless.
  Example in Node.js: An API where each request contains all necessary data (e.g., authentication token in the header), and the server doesn't store user session information.

Stateful: 
In a stateful system, the server keeps track of the state of the client between requests. This means that the server stores data, such as user sessions, 
that is retained across multiple interactions. This could be useful for things like login sessions or shopping carts.
  Example in Node.js: A Node.js application using express-session or cookie-based authentication to track user sessions.


REST API vs RESTful API:
REST API
REST stands for Representational State Transfer. It is an architectural style (not a protocol or standard) for designing networked applications.
It relies on a stateless, client-server, cacheable communication protocol
Serverless - server must contain all the information needed to understand and process the request.
Uniform Interface - operations are performed using standard HTTP methods (GET, POST, PUT, DELETE).

RESTful API:
This is a more strict implementation of REST. It adheres fully to the REST principles and constraints. 




